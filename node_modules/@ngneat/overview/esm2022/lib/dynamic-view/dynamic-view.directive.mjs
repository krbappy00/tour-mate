import { Directive, Input, NgModule, } from '@angular/core';
import { isComponent, isString } from '../views/types';
import { DynamicViewComponent } from './dynamic-view.component';
import * as i0 from "@angular/core";
import * as i1 from "../views/view";
class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        const viewChanged = changes.view && !changes.view.isFirstChange();
        const contextChanged = changes.context && !changes.context.isFirstChange();
        const inputsChanged = changes.inputs && !changes.inputs.isFirstChange();
        if (viewChanged) {
            this.resolveContentType();
        }
        else if (contextChanged) {
            this.viewRef.updateContext(this.context);
        }
        else if (inputsChanged) {
            this.viewRef.setInputs(this.inputs || {});
        }
    }
    resolveContentType() {
        this.viewRef?.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else if (isComponent(this.view)) {
            this.viewRef = this.viewService.createComponent(this.view, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
            if (this.inputs) {
                this.viewRef.setInputs(this.inputs);
            }
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        this.viewRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.ViewService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.3", type: DynamicViewDirective, selector: "[dynamicView]", inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"], inputs: ["dynamicViewInputs", "inputs"] }, usesOnChanges: true, ngImport: i0 }); }
}
export { DynamicViewDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dynamicView]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.ViewService }]; }, propDecorators: { view: [{
                type: Input,
                args: ['dynamicView']
            }], injector: [{
                type: Input,
                args: ['dynamicViewInjector']
            }], context: [{
                type: Input,
                args: ['dynamicViewContext']
            }], inputs: [{
                type: Input,
                args: ['dynamicViewInputs']
            }] } });
class DynamicViewModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule }); }
}
export { DynamicViewModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DynamicViewDirective, DynamicViewComponent],
                    exports: [DynamicViewDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsR0FPVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVcsV0FBVyxFQUFFLFFBQVEsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBR3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFFaEUsTUFHYSxvQkFBb0I7SUFRL0IsWUFBb0IsVUFBNEIsRUFBVSxHQUFxQixFQUFVLFdBQXdCO1FBQTdGLGVBQVUsR0FBVixVQUFVLENBQWtCO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7SUFFckgsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0UsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFeEUsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksY0FBYyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQzthQUFNLElBQUksYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFO2dCQUNwRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3hCLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxPQUF5QyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ2hHO2FBQU0sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDekQsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUTtnQkFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztZQUVILElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZCxJQUFJLENBQUMsT0FBd0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZEO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUN2RSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO2dCQUM1QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87YUFDdEIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0F6RFUsb0JBQW9CO2tHQUFwQixvQkFBb0I7O1NBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjsySkFFdUIsSUFBSTtzQkFBekIsS0FBSzt1QkFBQyxhQUFhO2dCQUNVLFFBQVE7c0JBQXJDLEtBQUs7dUJBQUMscUJBQXFCO2dCQUNDLE9BQU87c0JBQW5DLEtBQUs7dUJBQUMsb0JBQW9CO2dCQUNDLE1BQU07c0JBQWpDLEtBQUs7dUJBQUMsbUJBQW1COztBQXdENUIsTUFJYSxpQkFBaUI7OEdBQWpCLGlCQUFpQjsrR0FBakIsaUJBQWlCLGlCQWhFakIsb0JBQW9CLEVBNkRNLG9CQUFvQixhQTdEOUMsb0JBQW9COytHQWdFcEIsaUJBQWlCOztTQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFKN0IsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxvQkFBb0IsQ0FBQztvQkFDMUQsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7aUJBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250ZW50LCBpc0NvbXBvbmVudCwgaXNTdHJpbmcsIFZpZXdSZWYgfSBmcm9tICcuLi92aWV3cy90eXBlcyc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL3ZpZXdzL3ZpZXcnO1xuaW1wb3J0IHsgQ29tcFJlZiB9IGZyb20gJy4uL3ZpZXdzL2NvbXAtcmVmJztcbmltcG9ydCB7IER5bmFtaWNWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9keW5hbWljLXZpZXcuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2R5bmFtaWNWaWV3XScsXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWV3RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXcnKSB2aWV3OiBDb250ZW50O1xuICBASW5wdXQoJ2R5bmFtaWNWaWV3SW5qZWN0b3InKSBpbmplY3RvcjogSW5qZWN0b3I7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdDb250ZXh0JykgY29udGV4dDogYW55O1xuICBASW5wdXQoJ2R5bmFtaWNWaWV3SW5wdXRzJykgaW5wdXRzOiBSZWNvcmQ8YW55LCBhbnk+O1xuXG4gIHByaXZhdGUgdmlld1JlZjogVmlld1JlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlZmF1bHRUcGw6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHZpZXdTZXJ2aWNlOiBWaWV3U2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnJlc29sdmVDb250ZW50VHlwZSgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGNvbnN0IHZpZXdDaGFuZ2VkID0gY2hhbmdlcy52aWV3ICYmICFjaGFuZ2VzLnZpZXcuaXNGaXJzdENoYW5nZSgpO1xuICAgIGNvbnN0IGNvbnRleHRDaGFuZ2VkID0gY2hhbmdlcy5jb250ZXh0ICYmICFjaGFuZ2VzLmNvbnRleHQuaXNGaXJzdENoYW5nZSgpO1xuICAgIGNvbnN0IGlucHV0c0NoYW5nZWQgPSBjaGFuZ2VzLmlucHV0cyAmJiAhY2hhbmdlcy5pbnB1dHMuaXNGaXJzdENoYW5nZSgpO1xuXG4gICAgaWYgKHZpZXdDaGFuZ2VkKSB7XG4gICAgICB0aGlzLnJlc29sdmVDb250ZW50VHlwZSgpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dENoYW5nZWQpIHtcbiAgICAgIHRoaXMudmlld1JlZi51cGRhdGVDb250ZXh0KHRoaXMuY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChpbnB1dHNDaGFuZ2VkKSB7XG4gICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8YW55Pikuc2V0SW5wdXRzKHRoaXMuaW5wdXRzIHx8IHt9KTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlQ29udGVudFR5cGUoKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gICAgaWYgKGlzU3RyaW5nKHRoaXMudmlldykpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1NlcnZpY2UuY3JlYXRlQ29tcG9uZW50KER5bmFtaWNWaWV3Q29tcG9uZW50LCB7XG4gICAgICAgIHZjcjogdGhpcy52Y3IsXG4gICAgICAgIGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxuICAgICAgfSk7XG4gICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8RHluYW1pY1ZpZXdDb21wb25lbnQ+KS5zZXRJbnB1dCgnY29udGVudCcsIHRoaXMudmlldykuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0gZWxzZSBpZiAoaXNDb21wb25lbnQodGhpcy52aWV3KSkge1xuICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3U2VydmljZS5jcmVhdGVDb21wb25lbnQodGhpcy52aWV3LCB7XG4gICAgICAgIHZjcjogdGhpcy52Y3IsXG4gICAgICAgIGluamVjdG9yOiB0aGlzLmluamVjdG9yID8/IHRoaXMudmNyLmluamVjdG9yLFxuICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuaW5wdXRzKSB7XG4gICAgICAgICh0aGlzLnZpZXdSZWYgYXMgQ29tcFJlZjxhbnk+KS5zZXRJbnB1dHModGhpcy5pbnB1dHMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZVZpZXcodGhpcy52aWV3IHx8IHRoaXMuZGVmYXVsdFRwbCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvciA/PyB0aGlzLnZjci5pbmplY3RvcixcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRHluYW1pY1ZpZXdEaXJlY3RpdmUsIER5bmFtaWNWaWV3Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW0R5bmFtaWNWaWV3RGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ZpZXdNb2R1bGUge31cbiJdfQ==