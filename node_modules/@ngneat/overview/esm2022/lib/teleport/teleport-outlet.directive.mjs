import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./teleport.service";
class TeleportOutletDirective {
    constructor(vcr, service) {
        this.vcr = vcr;
        this.service = service;
    }
    ngOnChanges(changes) {
        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used
        // as keys for the `ports` map.
        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {
            this.service.ports.set(this.teleportOutlet, this.vcr);
            this.service.newOutlet(this.teleportOutlet);
        }
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i1.TeleportService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.3", type: TeleportOutletDirective, selector: "[teleportOutlet]", inputs: { teleportOutlet: "teleportOutlet" }, usesOnChanges: true, ngImport: i0 }); }
}
export { TeleportOutletDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportOutlet]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.TeleportService }]; }, propDecorators: { teleportOutlet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQtb3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3RlbGVwb3J0L3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXlELE1BQU0sZUFBZSxDQUFDOzs7QUFHeEcsTUFHYSx1QkFBdUI7SUFJbEMsWUFBb0IsR0FBcUIsRUFBVSxPQUF3QjtRQUF2RCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO0lBQUcsQ0FBQztJQUUvRSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsK0ZBQStGO1FBQy9GLCtCQUErQjtRQUMvQixJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFFBQVEsRUFBRTtZQUNyRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OEdBakJVLHVCQUF1QjtrR0FBdkIsdUJBQXVCOztTQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFIbkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2lCQUM3QjtxSUFHVSxjQUFjO3NCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbGVwb3J0U2VydmljZSB9IGZyb20gJy4vdGVsZXBvcnQuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0ZWxlcG9ydE91dGxldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydE91dGxldERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgLy8gV2UgY291bGQndmUgYWxzbyB1c2VkIHRoZSBgbmdBY2NlcHRJbnB1dFR5cGVgLCBidXQgaXQncyBiZWluZyBkZXByZWNhdGVkIGluIG5ld2VyIEFuZ3VsYXIgdmVyc2lvbnMuXG4gIEBJbnB1dCgpIHRlbGVwb3J0T3V0bGV0OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHNlcnZpY2U6IFRlbGVwb3J0U2VydmljZSkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgLy8gVGhlIGB0ZWxlcG9ydE91dGxldGAgbWlnaHQgYmUgYG51bGx8dW5kZWZpbmVkYCwgYnV0IHdlIGRvbid0IHdhbnQgbnVsbGFibGUgdmFsdWVzIHRvIGJlIHVzZWRcbiAgICAvLyBhcyBrZXlzIGZvciB0aGUgYHBvcnRzYCBtYXAuXG4gICAgaWYgKGNoYW5nZXMudGVsZXBvcnRPdXRsZXQgJiYgdHlwZW9mIHRoaXMudGVsZXBvcnRPdXRsZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnNlcnZpY2UucG9ydHMuc2V0KHRoaXMudGVsZXBvcnRPdXRsZXQsIHRoaXMudmNyKTtcbiAgICAgIHRoaXMuc2VydmljZS5uZXdPdXRsZXQodGhpcy50ZWxlcG9ydE91dGxldCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zZXJ2aWNlLnBvcnRzLmRlbGV0ZSh0aGlzLnRlbGVwb3J0T3V0bGV0KTtcbiAgfVxufVxuIl19