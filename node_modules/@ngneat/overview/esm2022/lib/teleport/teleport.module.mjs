import { Directive, Input, NgModule, } from '@angular/core';
import { TeleportOutletDirective } from './teleport-outlet.directive';
import * as i0 from "@angular/core";
import * as i1 from "./teleport.service";
class TeleportDirective {
    constructor(tpl, service) {
        this.tpl = tpl;
        this.service = service;
        this.subscription = null;
    }
    ngOnChanges(changes) {
        if (changes.teleportTo && typeof this.teleportTo === 'string') {
            this.dispose();
            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {
                if (outlet) {
                    this.viewRef = outlet.createEmbeddedView(this.tpl);
                }
            });
        }
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose() {
        this.subscription?.unsubscribe();
        this.subscription = null;
        this.viewRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: i1.TeleportService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.3", type: TeleportDirective, selector: "[teleportTo]", inputs: { teleportTo: "teleportTo" }, usesOnChanges: true, ngImport: i0 }); }
}
export { TeleportDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportTo]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i1.TeleportService }]; }, propDecorators: { teleportTo: [{
                type: Input
            }] } });
class TeleportModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.3", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportModule }); }
}
export { TeleportModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TeleportDirective, TeleportOutletDirective],
                    exports: [TeleportDirective, TeleportOutletDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L292ZXJ2aWV3L3NyYy9saWIvdGVsZXBvcnQvdGVsZXBvcnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsR0FLVCxNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBRXRFLE1BR2EsaUJBQWlCO0lBTTVCLFlBQW9CLEdBQXFCLEVBQVUsT0FBd0I7UUFBdkQsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUZuRSxpQkFBWSxHQUF3QixJQUFJLENBQUM7SUFFNkIsQ0FBQztJQUUvRSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDN0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzdFLElBQUksTUFBTSxFQUFFO29CQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDcEQ7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0E1QlUsaUJBQWlCO2tHQUFqQixpQkFBaUI7O1NBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUg3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6QjtnSUFFVSxVQUFVO3NCQUFsQixLQUFLOztBQThCUixNQUlhLGNBQWM7OEdBQWQsY0FBYzsrR0FBZCxjQUFjLGlCQW5DZCxpQkFBaUIsRUFnQ00sdUJBQXVCLGFBaEM5QyxpQkFBaUIsRUFpQ0MsdUJBQXVCOytHQUV6QyxjQUFjOztTQUFkLGNBQWM7MkZBQWQsY0FBYztrQkFKMUIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSx1QkFBdUIsQ0FBQztvQkFDMUQsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUM7aUJBQ3REIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBUZWxlcG9ydFNlcnZpY2UgfSBmcm9tICcuL3RlbGVwb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmUgfSBmcm9tICcuL3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdGVsZXBvcnRUb10nLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdGVsZXBvcnRUbzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cGw6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgc2VydmljZTogVGVsZXBvcnRTZXJ2aWNlKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy50ZWxlcG9ydFRvICYmIHR5cGVvZiB0aGlzLnRlbGVwb3J0VG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2Uub3V0bGV0JCh0aGlzLnRlbGVwb3J0VG8pLnN1YnNjcmliZSgob3V0bGV0KSA9PiB7XG4gICAgICAgIGlmIChvdXRsZXQpIHtcbiAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBvdXRsZXQuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudHBsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH1cblxuICBwcml2YXRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RlbGVwb3J0RGlyZWN0aXZlLCBUZWxlcG9ydE91dGxldERpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtUZWxlcG9ydERpcmVjdGl2ZSwgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmVdLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydE1vZHVsZSB7fVxuIl19