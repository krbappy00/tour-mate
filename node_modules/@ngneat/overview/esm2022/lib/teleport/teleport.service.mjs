import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
class TeleportService {
    constructor() {
        this.outlets = new BehaviorSubject('');
        this.asObservable = this.outlets.asObservable();
        this.ports = new Map();
    }
    outlet$(name) {
        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));
    }
    newOutlet(name) {
        this.outlets.next(name);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportService, providedIn: 'root' }); }
}
export { TeleportService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: TeleportService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3RlbGVwb3J0L3RlbGVwb3J0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUU3QyxNQUdhLGVBQWU7SUFINUI7UUFJVSxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDMUMsaUJBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBTW5ELFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBNEIsQ0FBQztLQUs3QztJQVRDLE9BQU8sQ0FBQyxJQUFZO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBSUQsU0FBUyxDQUFDLElBQVk7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs4R0FaVSxlQUFlO2tIQUFmLGVBQWUsY0FGZCxNQUFNOztTQUVQLGVBQWU7MkZBQWYsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVGVsZXBvcnRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBvdXRsZXRzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcbiAgcHJpdmF0ZSBhc09ic2VydmFibGUgPSB0aGlzLm91dGxldHMuYXNPYnNlcnZhYmxlKCk7XG5cbiAgb3V0bGV0JChuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5hc09ic2VydmFibGUucGlwZShmaWx0ZXIoY3VycmVudCA9PiBjdXJyZW50ID09PSBuYW1lKSwgbWFwKG5hbWUgPT4gdGhpcy5wb3J0cy5nZXQobmFtZSkpKTtcbiAgfVxuXG4gIHBvcnRzID0gbmV3IE1hcDxzdHJpbmcsIFZpZXdDb250YWluZXJSZWY+KCk7XG5cbiAgbmV3T3V0bGV0KG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMub3V0bGV0cy5uZXh0KG5hbWUpO1xuICB9XG59XG4iXX0=