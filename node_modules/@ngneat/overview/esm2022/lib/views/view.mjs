import { ApplicationRef, EnvironmentInjector, inject, Injectable, InjectionToken, Injector, signal, } from '@angular/core';
import { isComponent, isString, isTemplateRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
export const VIEW_CONTEXT = new InjectionToken('Component context');
class ViewService {
    constructor() {
        this.injector = inject(Injector);
        this.appRef = inject(ApplicationRef);
        this.environmentInjector = inject(EnvironmentInjector);
    }
    createComponent(component, options = {}) {
        let injector = options.injector ?? this.injector;
        let contextSignal;
        if (options.context) {
            contextSignal = signal(options.context);
            injector = Injector.create({
                providers: [{
                        provide: VIEW_CONTEXT,
                        useValue: contextSignal.asReadonly()
                    }],
                parent: injector
            });
        }
        return new CompRef({
            component,
            vcr: options.vcr,
            injector,
            appRef: this.appRef,
            environmentInjector: options.environmentInjector || this.environmentInjector,
            contextSignal
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
            injector: options.injector
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: ViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: ViewService, providedIn: 'root' }); }
}
export { ViewService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: ViewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export function injectViewContext() {
    return inject(VIEW_CONTEXT);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3ZpZXdzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFBRSxtQkFBbUIsRUFDbkMsTUFBTSxFQUNOLFVBQVUsRUFBRSxjQUFjLEVBQzFCLFFBQVEsRUFBVSxNQUFNLEdBSXpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBVSxXQUFXLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBVSxNQUFNLFNBQVMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztBQWtCckMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFrQixtQkFBbUIsQ0FBQyxDQUFDO0FBRXJGLE1BQ2EsV0FBVztJQUR4QjtRQUVVLGFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoQyx3QkFBbUIsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQW9EM0Q7SUFsREMsZUFBZSxDQUFnQixTQUFxQixFQUFFLFVBQW9DLEVBQUU7UUFDMUYsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pELElBQUksYUFBa0QsQ0FBQztRQUV2RCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDbkIsYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQ3pCLFNBQVMsRUFBRSxDQUFDO3dCQUNWLE9BQU8sRUFBRSxZQUFZO3dCQUNyQixRQUFRLEVBQUUsYUFBYSxDQUFDLFVBQVUsRUFBRTtxQkFDckMsQ0FBQztnQkFDRixNQUFNLEVBQUUsUUFBUTthQUNqQixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQWdCO1lBQ2hDLFNBQVM7WUFDVCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7WUFDaEIsUUFBUTtZQUNSLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixtQkFBbUIsRUFBRSxPQUFPLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLG1CQUFtQjtZQUM1RSxhQUFhO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGNBQWMsQ0FBVSxHQUF5QixFQUFFLFVBQStCLEVBQUU7UUFDbEYsT0FBTyxJQUFJLE1BQU0sQ0FBQztZQUNoQixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7WUFDaEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLEdBQUc7WUFDSCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDeEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1NBQzNCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFNRCxVQUFVLENBQTZCLE9BQVUsRUFBRSxjQUFvQyxFQUFFO1FBQ3ZGLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDbEQ7YUFBTSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO2FBQU0sSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQjthQUFNO1lBQ0wsTUFBTSxrQ0FBa0MsQ0FBQztTQUMxQztJQUNILENBQUM7OEdBdERVLFdBQVc7a0hBQVgsV0FBVyxjQURFLE1BQU07O1NBQ25CLFdBQVc7MkZBQVgsV0FBVztrQkFEdkIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7O0FBMERsQyxNQUFNLFVBQVUsaUJBQWlCO0lBQy9CLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBYyxDQUFDO0FBQzNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZiwgRW52aXJvbm1lbnRJbmplY3RvcixcbiAgaW5qZWN0LFxuICBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbixcbiAgSW5qZWN0b3IsIFNpZ25hbCwgc2lnbmFsLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZiwgV3JpdGFibGVTaWduYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb250ZW50LCBpc0NvbXBvbmVudCwgaXNTdHJpbmcsIGlzVGVtcGxhdGVSZWYsIFZpZXdSZWZ9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgVHBsUmVmIH0gZnJvbSAnLi90ZW1wbGF0ZS1yZWYnO1xuaW1wb3J0IHsgU3RyaW5nUmVmIH0gZnJvbSAnLi9zdHJpbmctcmVmJztcbmltcG9ydCB7IENvbXBSZWYgfSBmcm9tICcuL2NvbXAtcmVmJztcblxuaW50ZXJmYWNlIF9WaWV3T3B0aW9ucyB7XG4gIHZjcj86IFZpZXdDb250YWluZXJSZWYgfCB1bmRlZmluZWQ7XG4gIGluamVjdG9yPzogSW5qZWN0b3IgfCB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBUZW1wbGF0ZVZpZXdPcHRpb25zIGV4dGVuZHMgX1ZpZXdPcHRpb25zIHtcbiAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBDb21wVmlld09wdGlvbnM8Q29udGV4dCA9IGFueT4gZXh0ZW5kcyBfVmlld09wdGlvbnMge1xuICBlbnZpcm9ubWVudEluamVjdG9yPzogRW52aXJvbm1lbnRJbmplY3RvciB8IHVuZGVmaW5lZDtcbiAgY29udGV4dD86IENvbnRleHQgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIFZpZXdPcHRpb25zPENvbnRleHQgPSBhbnk+ID0gX1ZpZXdPcHRpb25zICYgQ29tcFZpZXdPcHRpb25zPENvbnRleHQ+ICYgVGVtcGxhdGVWaWV3T3B0aW9ucztcblxuZXhwb3J0IGNvbnN0IFZJRVdfQ09OVEVYVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTaWduYWw8dW5rbm93bj4+KCdDb21wb25lbnQgY29udGV4dCcpO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFZpZXdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBpbmplY3RvciA9IGluamVjdChJbmplY3Rvcik7XG4gIHByaXZhdGUgYXBwUmVmID0gaW5qZWN0KEFwcGxpY2F0aW9uUmVmKTtcbiAgcHJpdmF0ZSBlbnZpcm9ubWVudEluamVjdG9yID0gaW5qZWN0KEVudmlyb25tZW50SW5qZWN0b3IpO1xuXG4gIGNyZWF0ZUNvbXBvbmVudDxDb21wLCBDb250ZXh0Pihjb21wb25lbnQ6IFR5cGU8Q29tcD4sIG9wdGlvbnM6IENvbXBWaWV3T3B0aW9uczxDb250ZXh0PiA9IHt9KSB7XG4gICAgbGV0IGluamVjdG9yID0gb3B0aW9ucy5pbmplY3RvciA/PyB0aGlzLmluamVjdG9yO1xuICAgIGxldCBjb250ZXh0U2lnbmFsOiBXcml0YWJsZVNpZ25hbDxDb250ZXh0PiB8IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgIGNvbnRleHRTaWduYWwgPSBzaWduYWwob3B0aW9ucy5jb250ZXh0KTtcbiAgICAgIGluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICAgIHByb3ZpZGU6IFZJRVdfQ09OVEVYVCxcbiAgICAgICAgICB1c2VWYWx1ZTogY29udGV4dFNpZ25hbC5hc1JlYWRvbmx5KClcbiAgICAgICAgfV0sXG4gICAgICAgIHBhcmVudDogaW5qZWN0b3JcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29tcFJlZjxDb21wLCBDb250ZXh0Pih7XG4gICAgICBjb21wb25lbnQsXG4gICAgICB2Y3I6IG9wdGlvbnMudmNyLFxuICAgICAgaW5qZWN0b3IsXG4gICAgICBhcHBSZWY6IHRoaXMuYXBwUmVmLFxuICAgICAgZW52aXJvbm1lbnRJbmplY3Rvcjogb3B0aW9ucy5lbnZpcm9ubWVudEluamVjdG9yIHx8IHRoaXMuZW52aXJvbm1lbnRJbmplY3RvcixcbiAgICAgIGNvbnRleHRTaWduYWxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVRlbXBsYXRlPENvbnRleHQ+KHRwbDogVGVtcGxhdGVSZWY8Q29udGV4dD4sIG9wdGlvbnM6IFRlbXBsYXRlVmlld09wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgVHBsUmVmKHtcbiAgICAgIHZjcjogb3B0aW9ucy52Y3IsXG4gICAgICBhcHBSZWY6IHRoaXMuYXBwUmVmLFxuICAgICAgdHBsLFxuICAgICAgY29udGV4dDogb3B0aW9ucy5jb250ZXh0LFxuICAgICAgaW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3JcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVZpZXc8Q29tcCwgQ29udGV4dD4oY29udGVudDogVHlwZTxDb21wPiwgdmlld09wdGlvbnM6IENvbXBWaWV3T3B0aW9uczxDb250ZXh0Pik6IENvbXBSZWY8Q29tcCwgQ29udGV4dD47XG4gIGNyZWF0ZVZpZXc8VD4oY29udGVudDogVGVtcGxhdGVSZWY8VD4sIHZpZXdPcHRpb25zOiBUZW1wbGF0ZVZpZXdPcHRpb25zKTogVHBsUmVmPFQ+O1xuICBjcmVhdGVWaWV3KGNvbnRlbnQ6IHN0cmluZyk6IFN0cmluZ1JlZjtcbiAgY3JlYXRlVmlldyhjb250ZW50OiBDb250ZW50LCB2aWV3T3B0aW9ucz86IFZpZXdPcHRpb25zKTogVmlld1JlZjtcbiAgY3JlYXRlVmlldzxUIGV4dGVuZHMgQ29udGVudCwgQ29udGV4dD4oY29udGVudDogVCwgdmlld09wdGlvbnM6IFZpZXdPcHRpb25zPENvbnRleHQ+ID0ge30pOiBWaWV3UmVmIHtcbiAgICBpZiAoaXNUZW1wbGF0ZVJlZihjb250ZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVGVtcGxhdGUoY29udGVudCwgdmlld09wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoaXNDb21wb25lbnQoY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbXBvbmVudChjb250ZW50LCB2aWV3T3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyhjb250ZW50KSkge1xuICAgICAgcmV0dXJuIG5ldyBTdHJpbmdSZWYoY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdUeXBlIG9mIGNvbnRlbnQgaXMgbm90IHN1cHBvcnRlZCc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RWaWV3Q29udGV4dDxUPigpIHtcbiAgcmV0dXJuIGluamVjdChWSUVXX0NPTlRFWFQpIGFzIFNpZ25hbDxUPjtcbn1cbiJdfQ==