export class TplRef {
    constructor(args) {
        this.args = args;
        if (this.args.vcr) {
            this.ref = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {}, { injector: args.injector });
            this.ref.detectChanges();
        }
        else {
            this.ref = this.args.tpl.createEmbeddedView(this.args.context || {}, args.injector);
            this.ref.detectChanges();
            this.args.appRef.attachView(this.ref);
        }
    }
    detectChanges() {
        this.ref.detectChanges();
        return this;
    }
    getElement() {
        const rootNodes = this.ref.rootNodes;
        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {
            this.element = rootNodes[0];
        }
        else {
            this.element = document.createElement('div');
            this.element.append(...rootNodes);
        }
        return this.element;
    }
    destroy() {
        if (this.ref.rootNodes[0] !== 1) {
            this.element?.parentNode.removeChild(this.element);
            this.element = null;
        }
        if (!this.args.vcr) {
            this.args.appRef.detachView(this.ref);
        }
        this.ref.destroy();
        this.ref = null;
    }
    updateContext(context) {
        this.ref.context = context;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L292ZXJ2aWV3L3NyYy9saWIvdmlld3MvdGVtcGxhdGUtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxNQUFNLE9BQU8sTUFBTTtJQUlqQixZQUFvQixJQUFhO1FBQWIsU0FBSSxHQUFKLElBQUksQ0FBUztRQUMvQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2pILElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUssRUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFekIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3JDLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDaEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQVU7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwbGljYXRpb25SZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0b3IsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdSZWYgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIEFyZ3M8Qz4ge1xuICB0cGw6IFRlbXBsYXRlUmVmPEM+O1xuICBjb250ZXh0OiBDO1xuICB2Y3I6IFZpZXdDb250YWluZXJSZWYgfCB1bmRlZmluZWQ7XG4gIGFwcFJlZjogQXBwbGljYXRpb25SZWYgfCB1bmRlZmluZWQ7XG4gIGluamVjdG9yOiBJbmplY3RvciB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIFRwbFJlZjxDPiBpbXBsZW1lbnRzIFZpZXdSZWYge1xuICByZWY6IEVtYmVkZGVkVmlld1JlZjx7fT47XG4gIHByaXZhdGUgZWxlbWVudDogRWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFyZ3M6IEFyZ3M8Qz4pIHtcbiAgICBpZiAodGhpcy5hcmdzLnZjcikge1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmFyZ3MudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmFyZ3MudHBsLCB0aGlzLmFyZ3MuY29udGV4dCB8fCB7fSwgeyBpbmplY3RvcjogYXJncy5pbmplY3RvciB9KTtcbiAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmFyZ3MudHBsLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmFyZ3MuY29udGV4dCB8fCAoe30gYXMgQyksIGFyZ3MuaW5qZWN0b3IpO1xuICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgdGhpcy5hcmdzLmFwcFJlZi5hdHRhY2hWaWV3KHRoaXMucmVmKTtcbiAgICB9XG4gIH1cblxuICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0RWxlbWVudCgpOiBFbGVtZW50IHtcbiAgICBjb25zdCByb290Tm9kZXMgPSB0aGlzLnJlZi5yb290Tm9kZXM7XG4gICAgaWYgKHJvb3ROb2Rlcy5sZW5ndGggPT09IDEgJiYgcm9vdE5vZGVzWzBdID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gcm9vdE5vZGVzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoLi4ucm9vdE5vZGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5yZWYucm9vdE5vZGVzWzBdICE9PSAxKSB7XG4gICAgICB0aGlzLmVsZW1lbnQ/LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFyZ3MudmNyKSB7XG4gICAgICB0aGlzLmFyZ3MuYXBwUmVmLmRldGFjaFZpZXcodGhpcy5yZWYpO1xuICAgIH1cblxuICAgIHRoaXMucmVmLmRlc3Ryb3koKTtcbiAgICB0aGlzLnJlZiA9IG51bGw7XG4gIH1cblxuICB1cGRhdGVDb250ZXh0KGNvbnRleHQ6IEMpIHtcbiAgICB0aGlzLnJlZi5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=