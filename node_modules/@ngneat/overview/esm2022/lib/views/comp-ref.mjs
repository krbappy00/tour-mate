import { createComponent, } from '@angular/core';
export class CompRef {
    constructor(options) {
        this.options = options;
        if (options.vcr) {
            this.ref = options.vcr.createComponent(options.component, {
                index: options.vcr.length,
                injector: options.injector || options.vcr.injector,
            });
        }
        else {
            this.ref = createComponent(options.component, {
                elementInjector: options.injector,
                environmentInjector: options.environmentInjector,
            });
            options.appRef.attachView(this.ref.hostView);
        }
    }
    setInput(input, value) {
        this.ref.setInput(input, value);
        return this;
    }
    setInputs(inputs) {
        Object.keys(inputs).forEach((input) => {
            this.ref.setInput(input, inputs[input]);
        });
        return this;
    }
    detectChanges() {
        this.ref.hostView.detectChanges();
        return this;
    }
    updateContext(context) {
        this.options.contextSignal?.set(context);
        return this;
    }
    appendTo(container) {
        container.appendChild(this.getElement());
        return this;
    }
    removeFrom(container) {
        container.removeChild(this.getElement());
        return this;
    }
    getRawContent() {
        return this.getElement().outerHTML;
    }
    getElement() {
        return this.ref.location.nativeElement;
    }
    destroy() {
        this.ref.destroy();
        !this.options.vcr && this.options.appRef.detachView(this.ref.hostView);
        this.ref = null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcC1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvb3ZlcnZpZXcvc3JjL2xpYi92aWV3cy9jb21wLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsZUFBZSxHQU9oQixNQUFNLGVBQWUsQ0FBQztBQVl2QixNQUFNLE9BQU8sT0FBTztJQUdsQixZQUFvQixPQUErQjtRQUEvQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUNqRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3hELEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU07Z0JBQ3pCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUTthQUNuRCxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQU8sT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDbEQsZUFBZSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2dCQUNqQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsbUJBQW1CO2FBQ2pELENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUF5QyxLQUFRLEVBQUUsS0FBYztRQUN2RSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQXVDO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFnQjtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWtCO1FBQ3pCLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVSxDQUFDLFNBQWtCO1FBQzNCLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnRSZWYsXG4gIGNyZWF0ZUNvbXBvbmVudCxcbiAgRW52aXJvbm1lbnRJbmplY3RvcixcbiAgSW5qZWN0b3IsXG4gIFNpZ25hbCxcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgV3JpdGFibGVTaWduYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXhjbHVkZUZ1bmN0aW9ucywgVmlld1JlZiB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgT3B0aW9uczxDb21wLCBDb250ZXh0PiB7XG4gIGNvbXBvbmVudDogVHlwZTxDb21wPjtcbiAgaW5qZWN0b3I6IEluamVjdG9yO1xuICBlbnZpcm9ubWVudEluamVjdG9yOiBFbnZpcm9ubWVudEluamVjdG9yO1xuICB2Y3I6IFZpZXdDb250YWluZXJSZWYgfCB1bmRlZmluZWQ7XG4gIGFwcFJlZjogQXBwbGljYXRpb25SZWYgfCB1bmRlZmluZWQ7XG4gIGNvbnRleHRTaWduYWw/OiBXcml0YWJsZVNpZ25hbDxDb250ZXh0Pjtcbn1cblxuZXhwb3J0IGNsYXNzIENvbXBSZWY8Q29tcCwgQ29udGV4dCA9IGFueT4gaW1wbGVtZW50cyBWaWV3UmVmIHtcbiAgcmVmOiBDb21wb25lbnRSZWY8Q29tcD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zPENvbXAsIENvbnRleHQ+KSB7XG4gICAgaWYgKG9wdGlvbnMudmNyKSB7XG4gICAgICB0aGlzLnJlZiA9IG9wdGlvbnMudmNyLmNyZWF0ZUNvbXBvbmVudChvcHRpb25zLmNvbXBvbmVudCwge1xuICAgICAgICBpbmRleDogb3B0aW9ucy52Y3IubGVuZ3RoLFxuICAgICAgICBpbmplY3Rvcjogb3B0aW9ucy5pbmplY3RvciB8fCBvcHRpb25zLnZjci5pbmplY3RvcixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZiA9IGNyZWF0ZUNvbXBvbmVudDxDb21wPihvcHRpb25zLmNvbXBvbmVudCwge1xuICAgICAgICBlbGVtZW50SW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3IsXG4gICAgICAgIGVudmlyb25tZW50SW5qZWN0b3I6IG9wdGlvbnMuZW52aXJvbm1lbnRJbmplY3RvcixcbiAgICAgIH0pO1xuICAgICAgb3B0aW9ucy5hcHBSZWYuYXR0YWNoVmlldyh0aGlzLnJlZi5ob3N0Vmlldyk7XG4gICAgfVxuICB9XG5cbiAgc2V0SW5wdXQ8SyBleHRlbmRzIGtleW9mIEV4Y2x1ZGVGdW5jdGlvbnM8Q29tcD4+KGlucHV0OiBLLCB2YWx1ZTogQ29tcFtLXSkge1xuICAgIHRoaXMucmVmLnNldElucHV0KGlucHV0IGFzIHN0cmluZywgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRJbnB1dHMoaW5wdXRzOiBQYXJ0aWFsPEV4Y2x1ZGVGdW5jdGlvbnM8Q29tcD4+KSB7XG4gICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgdGhpcy5yZWYuc2V0SW5wdXQoaW5wdXQsIGlucHV0c1tpbnB1dF0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgIHRoaXMucmVmLmhvc3RWaWV3LmRldGVjdENoYW5nZXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdXBkYXRlQ29udGV4dChjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgdGhpcy5vcHRpb25zLmNvbnRleHRTaWduYWw/LnNldChjb250ZXh0KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXBwZW5kVG8oY29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZ2V0RWxlbWVudCgpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlRnJvbShjb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5nZXRFbGVtZW50KCkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXRSYXdDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnQoKS5vdXRlckhUTUw7XG4gIH1cblxuICBnZXRFbGVtZW50PFQgZXh0ZW5kcyBFbGVtZW50PigpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5yZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZWYuZGVzdHJveSgpO1xuICAgICF0aGlzLm9wdGlvbnMudmNyICYmIHRoaXMub3B0aW9ucy5hcHBSZWYuZGV0YWNoVmlldyh0aGlzLnJlZi5ob3N0Vmlldyk7XG4gICAgdGhpcy5yZWYgPSBudWxsO1xuICB9XG59XG4iXX0=